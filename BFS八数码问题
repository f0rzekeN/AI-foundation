from collections import deque
goal = (1, 2, 3, 4, 5, 6, 7, 8, 0)
def generate_new_states(state):
    new_states = []
    pos0 = state.index(0)
    i, j = pos0 // 3, pos0 % 3
    dir = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for di, dj in dir:
        ni, nj = i + di, j + dj
        if 0 <= ni < 3 and 0 <= nj < 3:
            new_pos = ni * 3 + nj
            new_state = list(state)
            new_state[pos0], new_state[new_pos] = new_state[new_pos], new_state[pos0]
            new_states.append(tuple(new_state))
    return new_states
def bfs(start, goal):
    if start == goal:
        return 0
    queue = deque()
    queue.append((start, 0)) #(当前状态，已走步数)
    visited = set()
    visited.add(start)
    while queue:
        current_state, steps = queue.popleft()
        for new_state in generate_new_states(current_state):
            if new_state == goal:
                return steps + 1
            if new_state not in visited:
                visited.add(new_state)
                queue.append((new_state, steps + 1))
    return -1

def main():
    input_str = sys.stdin.readline().split()
    start = []
    for c in input_str:
        if c == 'x':
            start.append(0)
        else:
            start.append(int(c))
    start_tuple = tuple(start)
    result = bfs(start_tuple, goal)
    print(result)
if __name__ == "__main__":
    main()
